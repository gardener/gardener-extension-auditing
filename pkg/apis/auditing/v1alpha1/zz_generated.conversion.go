//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	auditing "github.com/gardener/gardener-extension-auditing/pkg/apis/auditing"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*AuditBackend)(nil), (*auditing.AuditBackend)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_AuditBackend_To_auditing_AuditBackend(a.(*AuditBackend), b.(*auditing.AuditBackend), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*auditing.AuditBackend)(nil), (*AuditBackend)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_auditing_AuditBackend_To_v1alpha1_AuditBackend(a.(*auditing.AuditBackend), b.(*AuditBackend), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*AuditConfiguration)(nil), (*auditing.AuditConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_AuditConfiguration_To_auditing_AuditConfiguration(a.(*AuditConfiguration), b.(*auditing.AuditConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*auditing.AuditConfiguration)(nil), (*AuditConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_auditing_AuditConfiguration_To_v1alpha1_AuditConfiguration(a.(*auditing.AuditConfiguration), b.(*AuditConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*BackendHTTP)(nil), (*auditing.BackendHTTP)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_BackendHTTP_To_auditing_BackendHTTP(a.(*BackendHTTP), b.(*auditing.BackendHTTP), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*auditing.BackendHTTP)(nil), (*BackendHTTP)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_auditing_BackendHTTP_To_v1alpha1_BackendHTTP(a.(*auditing.BackendHTTP), b.(*BackendHTTP), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TLSConfig)(nil), (*auditing.TLSConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TLSConfig_To_auditing_TLSConfig(a.(*TLSConfig), b.(*auditing.TLSConfig), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*auditing.TLSConfig)(nil), (*TLSConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_auditing_TLSConfig_To_v1alpha1_TLSConfig(a.(*auditing.TLSConfig), b.(*TLSConfig), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_AuditBackend_To_auditing_AuditBackend(in *AuditBackend, out *auditing.AuditBackend, s conversion.Scope) error {
	out.HTTP = (*auditing.BackendHTTP)(unsafe.Pointer(in.HTTP))
	return nil
}

// Convert_v1alpha1_AuditBackend_To_auditing_AuditBackend is an autogenerated conversion function.
func Convert_v1alpha1_AuditBackend_To_auditing_AuditBackend(in *AuditBackend, out *auditing.AuditBackend, s conversion.Scope) error {
	return autoConvert_v1alpha1_AuditBackend_To_auditing_AuditBackend(in, out, s)
}

func autoConvert_auditing_AuditBackend_To_v1alpha1_AuditBackend(in *auditing.AuditBackend, out *AuditBackend, s conversion.Scope) error {
	out.HTTP = (*BackendHTTP)(unsafe.Pointer(in.HTTP))
	return nil
}

// Convert_auditing_AuditBackend_To_v1alpha1_AuditBackend is an autogenerated conversion function.
func Convert_auditing_AuditBackend_To_v1alpha1_AuditBackend(in *auditing.AuditBackend, out *AuditBackend, s conversion.Scope) error {
	return autoConvert_auditing_AuditBackend_To_v1alpha1_AuditBackend(in, out, s)
}

func autoConvert_v1alpha1_AuditConfiguration_To_auditing_AuditConfiguration(in *AuditConfiguration, out *auditing.AuditConfiguration, s conversion.Scope) error {
	out.Backends = *(*[]auditing.AuditBackend)(unsafe.Pointer(&in.Backends))
	return nil
}

// Convert_v1alpha1_AuditConfiguration_To_auditing_AuditConfiguration is an autogenerated conversion function.
func Convert_v1alpha1_AuditConfiguration_To_auditing_AuditConfiguration(in *AuditConfiguration, out *auditing.AuditConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha1_AuditConfiguration_To_auditing_AuditConfiguration(in, out, s)
}

func autoConvert_auditing_AuditConfiguration_To_v1alpha1_AuditConfiguration(in *auditing.AuditConfiguration, out *AuditConfiguration, s conversion.Scope) error {
	out.Backends = *(*[]AuditBackend)(unsafe.Pointer(&in.Backends))
	return nil
}

// Convert_auditing_AuditConfiguration_To_v1alpha1_AuditConfiguration is an autogenerated conversion function.
func Convert_auditing_AuditConfiguration_To_v1alpha1_AuditConfiguration(in *auditing.AuditConfiguration, out *AuditConfiguration, s conversion.Scope) error {
	return autoConvert_auditing_AuditConfiguration_To_v1alpha1_AuditConfiguration(in, out, s)
}

func autoConvert_v1alpha1_BackendHTTP_To_auditing_BackendHTTP(in *BackendHTTP, out *auditing.BackendHTTP, s conversion.Scope) error {
	out.URL = in.URL
	if err := Convert_v1alpha1_TLSConfig_To_auditing_TLSConfig(&in.TLS, &out.TLS, s); err != nil {
		return err
	}
	out.Compression = (*string)(unsafe.Pointer(in.Compression))
	return nil
}

// Convert_v1alpha1_BackendHTTP_To_auditing_BackendHTTP is an autogenerated conversion function.
func Convert_v1alpha1_BackendHTTP_To_auditing_BackendHTTP(in *BackendHTTP, out *auditing.BackendHTTP, s conversion.Scope) error {
	return autoConvert_v1alpha1_BackendHTTP_To_auditing_BackendHTTP(in, out, s)
}

func autoConvert_auditing_BackendHTTP_To_v1alpha1_BackendHTTP(in *auditing.BackendHTTP, out *BackendHTTP, s conversion.Scope) error {
	out.URL = in.URL
	if err := Convert_auditing_TLSConfig_To_v1alpha1_TLSConfig(&in.TLS, &out.TLS, s); err != nil {
		return err
	}
	out.Compression = (*string)(unsafe.Pointer(in.Compression))
	return nil
}

// Convert_auditing_BackendHTTP_To_v1alpha1_BackendHTTP is an autogenerated conversion function.
func Convert_auditing_BackendHTTP_To_v1alpha1_BackendHTTP(in *auditing.BackendHTTP, out *BackendHTTP, s conversion.Scope) error {
	return autoConvert_auditing_BackendHTTP_To_v1alpha1_BackendHTTP(in, out, s)
}

func autoConvert_v1alpha1_TLSConfig_To_auditing_TLSConfig(in *TLSConfig, out *auditing.TLSConfig, s conversion.Scope) error {
	out.SecretReferenceName = in.SecretReferenceName
	return nil
}

// Convert_v1alpha1_TLSConfig_To_auditing_TLSConfig is an autogenerated conversion function.
func Convert_v1alpha1_TLSConfig_To_auditing_TLSConfig(in *TLSConfig, out *auditing.TLSConfig, s conversion.Scope) error {
	return autoConvert_v1alpha1_TLSConfig_To_auditing_TLSConfig(in, out, s)
}

func autoConvert_auditing_TLSConfig_To_v1alpha1_TLSConfig(in *auditing.TLSConfig, out *TLSConfig, s conversion.Scope) error {
	out.SecretReferenceName = in.SecretReferenceName
	return nil
}

// Convert_auditing_TLSConfig_To_v1alpha1_TLSConfig is an autogenerated conversion function.
func Convert_auditing_TLSConfig_To_v1alpha1_TLSConfig(in *auditing.TLSConfig, out *TLSConfig, s conversion.Scope) error {
	return autoConvert_auditing_TLSConfig_To_v1alpha1_TLSConfig(in, out, s)
}
